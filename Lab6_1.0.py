class Сотрудник:
    def __init__(self, рабочие_часы, ставка, коэффициент_премии):
        self.рабочие_часы = рабочие_часы
        self.ставка = ставка
        self.коэффициент_премии = коэффициент_премии

    def рассчитать_премию(self):
        """
        Рассчитать размер премии на основе ставки и коэффициента премии.
        """
        return self.ставка * self.коэффициент_премии

    def отношение_зарплаты_к_часам(self):
        """
        Рассчитать соотношение зарплаты к рабочим часам.
        """
        общая_зарплата = (self.ставка * self.рабочие_часы) + self.рассчитать_премию()
        return общая_зарплата / self.рабочие_часы

    def __add__(self, other):
        """
        Перегрузка оператора сложения для суммирования ставок двух сотрудников.
        Возвращает нового сотрудника с объединенными рабочими часами и средней ставкой.
        """
        if isinstance(other, Сотрудник):
            новые_часы = self.рабочие_часы + other.рабочие_часы
            новая_ставка = (self.ставка + other.ставка) / 2
            новый_коэффициент = (self.коэффициент_премии + other.коэффициент_премии) / 2
            return Сотрудник(новые_часы, новая_ставка, новый_коэффициент)
        raise TypeError("Сложение возможно только между объектами класса Сотрудник")

class СтаршийСотрудник(Сотрудник):
    def __init__(self, рабочие_часы, ставка, коэффициент_премии, количество_проектов):
        super().__init__(рабочие_часы, ставка, коэффициент_премии)
        self.количество_проектов = количество_проектов

    def рассчитать_премию(self):
        """
        Старшие сотрудники получают премию на основе количества управляемых проектов.
        """
        return super().рассчитать_премию() + (self.количество_проектов * 500)

class Директор(Сотрудник):
    def __init__(self, рабочие_часы, ставка, коэффициент_премии, количество_отделов):
        super().__init__(рабочие_часы, ставка, коэффициент_премии)
        self.количество_отделов = количество_отделов

    def рассчитать_премию(self):
        """
        Директора получают более высокую премию на основе количества курируемых отделов.
        """
        return super().рассчитать_премию() + (self.количество_отделов * 1000)

сотрудник = Сотрудник(160, 20, 0.1)
print("Премия сотрудника:", сотрудник.рассчитать_премию())
print("Соотношение зарплаты к часам:", сотрудник.отношение_зарплаты_к_часам())

старший = СтаршийСотрудник(160, 30, 0.15, 3)
print("Премия старшего сотрудника:", старший.рассчитать_премию())
print("Соотношение зарплаты к часам старшего сотрудника:", старший.отношение_зарплаты_к_часам())

директор = Директор(160, 50, 0.2, 5)
print("Премия директора:", директор.рассчитать_премию())
print("Соотношение зарплаты к часам директора:", директор.отношение_зарплаты_к_часам())

сотрудник_сумма = сотрудник + старший
print("Суммированный сотрудник:")
print("Рабочие часы:", сотрудник_сумма.рабочие_часы)
print("Ставка:", сотрудник_сумма.ставка)
print("Коэффициент премии:", сотрудник_сумма.коэффициент_премии)
